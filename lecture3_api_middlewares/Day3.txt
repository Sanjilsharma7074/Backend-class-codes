1. Status Codes (400 - 404, 500 - 503, 200 - 204)
201 , 403 , 

2. Query params will be sent as string and hence there would be no need to tell anyone that a query param is being sent.

    - I sent a number as a query param but i received a string instead -  { name: 'sanjil', number: '2025' }

    - req.query is an object and we are sending key:value pairs for the same.

    - query send as a number will be converted to string too.

    - query params are to be sent through postman under query params section.

    - To access a key through any object we can also use destructuring(here, object is req.query and key is name)

        - req.query is an object with 2 keys:value pairs, name and number -> const{name} = req.query; here name is a var

          -> http://localhost:8000/user?name=sanjil&number=2025 : here name is a key
          if the name of the variable does exists as some key within the object, only then the value of the key will be stored inside the newly created variable.

          # destructuring can also be performed on arrays since arrays are also considered an object in the array where indexes are its keys(destructuring is also used while performing export and import), (use state hooks in react performs arrays destructuring too.)

    - An object cannot have duplicate keys, keys must always be unique.

3. array destructuring -> arr = [1,2,3,"hello"] -> we wish to retrive any one element from the array -> arr[1],arr[3]
  - To get multiple elements -> const [first, second, third] = arr; <-> [1,2,3] (mapping)
        - first = 1
        - second = 2
        - third = 3
  - To destructure an object we'll create an object , to destructure an array we'll create an array.
  When you want to destructure an object, you must use object syntax (curly braces {}).
  When you want to destructure an array, you must use array syntax (square brackets []).

4. usually const is used to declare vars and arrays when we dont want to make any changes to the once initlised vars and arrays

5. params - used for dynamic routing -> You wish to use a single API and want to implement multiple functionaity in it.
          - to delete a user we must send an unique ID of  the user so that my backend can tell to the DB which user is to be deleted 
          - To send multiple IDs in a single API we'll use the concept of params in a practical way.
          - req.params is an object and in order to retrieve its key 'id' we can use destructuring on it , again !
          - Just like query param, you can only send string to it, even if you send an integer, in the final output it will displayed as a string only.
          - in the query param, we had to write both key and value but params just displays the value and the key will just be known to the backend in this scenario. This makes the params a little secure in comparison to query params.
          - we can send multiple params to it, req.params can have as many number of keys.
      
6. Middlewares - These are the functions which runs in the middle of the frontend request and backend received point to do some changes in the request.

  - express.json() middleware manipulated the body -> The body in form of binary data was converted back to the json. 

  - Generic middlewares (Runs for every request, No matter how many number of request backend has, all must go through this particular middleware in order to get back the response), Path specific middlewears (Runs only those request which ""starts"" with a specific path.) -> synta for the both are same.

7. When an API req arrives, it gets stuck in the first middleware (it will excute the complete middleware but will not move to the next code after it,the middleware must send  a response within the middleware or call the next() to execute the complete code) and would not move on to the next middleware until and unless you call the next() within your callback function of the middleware.

  - next() - To pass the API request to next middleware or API route
  - middlewares will always be defined at the top of the code
  - if i have hit a payment API, so it will first hit all the middlewares given at the top of the code and only then wil; it reach the payment route defined in the code, and if the payment route is written between any two middlewares then the one above the route will be the only one to run successfully and we will not reach to the seond middleware, since the payment route in between will send back a response to the front end, leading to an eexcution of the complete code.

next lecture - event loops(interview based - comes under core nodejs, completely theory based), file handling , path specific middlewares